version: '3.8'

services:
  postgres-main:
    image: postgres:15
    container_name: postgres-main
    environment:
      POSTGRES_DB: mitservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_main_data:/var/lib/postgresql/data
      - ./migrations/main:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mitservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: '2G'
        reservations:
          cpus: '0.5'
          memory: '512M'

  postgres-inbox:
    image: postgres:15
    container_name: postgres-inbox
    environment:
      POSTGRES_DB: mitservice_inbox
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_inbox_data:/var/lib/postgresql/data
      - ./migrations/inbox:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mitservice_inbox"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: '2G'
        reservations:
          cpus: '0.5'
          memory: '512M'

  mit-service:
    build: .
    container_name: mit-service
    environment:
      - DB_HOST=postgres-main
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=mitservice
      - DB_SSLMODE=disable
      - INBOX_DB_HOST=postgres-inbox
      - INBOX_DB_PORT=5432
      - INBOX_DB_USER=postgres
      - INBOX_DB_PASSWORD=password
      - INBOX_DB_NAME=mitservice_inbox
      - INBOX_DB_SSLMODE=disable
      - REPOSITORY_TYPE=postgres
      - PORT=8080
      - INBOX_WORKER_COUNT=10
      - INBOX_POLL_INTERVAL=1s
    ports:
      - "8080:8080"
    depends_on:
      postgres-main:
        condition: service_healthy
      postgres-inbox:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: '2G'
        reservations:
          cpus: '0.5'
          memory: '512M'

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - default
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
    networks:
      - default

volumes:
  postgres_main_data:
  postgres_inbox_data:
  prometheus_data:
  grafana_data:

